#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

debug=3
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=4

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


listen=udp:<opensips server IP address>:5060   # CUSTOMIZE ME

listen=tcp:<opensips server IP address>:5060   # CUSTOMIZE ME


####### Modules Section ########

#set module path
mpath="/usr/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)


#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)







#### MYSQL module
loadmodule "db_mysql.so"

#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "port", 8888)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "default_expires", 120)
modparam("registrar", "min_expires", 60)
modparam("registrar", "max_expires", 150)

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "failed_transaction_flag", "ACC_FAILED")
/* account triggers (flags) */
modparam("acc", "db_flag", "ACC_DO")
modparam("acc", "db_missed_flag", "ACC_MISSED")
modparam("acc", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME


#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db|uri", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")


#### ALIAS module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME


#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc|uri", "use_domain", 1)


#### PRESENCE modules
loadmodule "xcap.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
modparam("xcap|presence", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME
modparam("presence_xml", "force_active", 1)
modparam("presence", "server_address", "sip:96.119.7.172:8080") # CUSTOMIZE ME


#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME




####  DIALPLAN module
loadmodule "dialplan.so"
modparam("dialplan", "db_url",
        "mysql://siptestadmin:siptestadminrw@localhost/siptest") # CUSTOMIZE ME




####  MI_HTTP module
loadmodule "mi_http.so"


####  RTP PROXY and NAT HELPPER modules
#### nathelper module
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "ping_nated_only", 1)
#modparam("nathelper", "received_avp", "$avp(42)")
#modparam("nathelper", "rtpproxy_sock", "udp:96.119.7.67:9000")
#modparam("nathelper", "rtpproxy_timeout", "1")
#modparam("nathelper", "rtpproxy_retr", 2)
modparam("nathelper", "sipping_bflag", 8)
modparam("nathelper", "sipping_from", "sip:pinger@siptest.comcast.net")
modparam("nathelper", "sipping_method", "OPTIONS")


#### rtpproxy module
loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:96.119.7.67:9000")
modparam("rtpproxy", "rtpproxy_timeout", "1")
modparam("rtpproxy", "rtpproxy_retr", 2)
modparam("rtpproxy", "nortpproxy_str", "a=siptestMGW:yes\r\n")


#### UDP & TCP Protocol
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

####  REST_CLIENT module
#
# Comcast
#
loadmodule "rest_client.so"
modparam("rest_client", "connection_timeout", 10)
modparam("rest_client", "curl_timeout", 10)
modparam("rest_client", "ssl_verifypeer", 0)  # Set it to 1 to enable verification of remote peer's certificate
#modparam("rest_client", "ssl_capath", "<path to ca_certificates>") # Set this to dir where ca cert is stored

####### Routing Logic ########

# main request routing logic

route{
	xlog("=====> NEW MESSAGE PROCESSING <=====");
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {
		# sequential requests within a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			
			# validate the sequential request against dialog
			if ( $DLG_status!=NULL && !validate_dialog() ) {
				xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
				## exit;
			}
			if (is_method("BYE")) {
				setflag(ACC_DO); # do accounting ...
				setflag(ACC_FAILED); # ... even if the transaction fails
			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(relay);
		} else {
			if (is_method("SUBSCRIBE") && $rd == "<opensips server ip address>:5060") { # CUSTOMIZE ME
				# in-dialog subscribe requests
				route(handle_presence);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  || (src_ip==11.22.33.44 && src_port==5060 /* CUSTOMIZE ME */) ) ) {

		if (is_from_local())
		{
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				proxy_challenge("", "0");
				exit;
			}
			if (!db_check_from()) {
				sl_send_reply("403","Forbidden auth ID");
				exit;
			}
			consume_credentials();
			# caller authenticated
		} else {
			# if caller is not local, then called number must be local
			if (!is_uri_host_local()) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		# create dialog with timeout
		if ( !create_dialog("B") ) {
			send_reply("500","Internal Server Error");
			exit;
		}
		setflag(ACC_DO); # do accounting
	}

	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n"); 
                xlog("OUTBOUND CALL : rURI $ru (Domain $rd)");
		#route(relay);
                route(offnet);
	}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE"))
		route(handle_presence);

	if (is_method("REGISTER"))
	{
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber")) {
			www_challenge("", "0");
			exit;
		}
		if (!db_check_to()) {
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}
		if ( proto==TCP ||  0 ) setflag(TCP_PERSISTENT);
		if (!save("location"))
			sl_reply_error();
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}


	# apply DB based aliases
	alias_db_lookup("dbaliases");
	
	
	# apply transformations from dialplan table
	dp_translate("0","$rU/$rU");
	
	if ($rU=~"^\+[1-9][0-9]+$" || $rU=~"^[0-9]+$") {

		#$rd="11.22.33.44"; /* CUSTOMIZE ME */
		#$rp=5060;
		#route(relay);
		#exit;
		xlog("-----> Called Number $rU");
		if ($rU=~"^\+12152861[0-9]{3,3}$" || $rU=~"^2152861[0-9]{3,3}$") {	#CUSTOMIZE CALLED NUMBERS HERE
			#xlog("-----> Route to siptest.comcast.net");
			#$rd = "siptest.comcast.net;user=phone";
			#route(offnet);
		}
		if ($rU=~"^\+12152862[0-9]{3,3}$" || $rU=~"^2152862[0-9]{3,3}$") {
			xlog("-----> Route to site2.siptest.comcast.net");
			$rd = "site2.siptest.comcast.net;user=phone";
			route(offnet);
		}
		if ($rU=~"^\+1571271[0-9]{4,4}$" || $rU=~"^571271[0-9]{4,4}$") {
			xlog("-----> Route to sp1.neustarlab.biz");
			$rd = "sp1.neustarlab.biz;user=phone";
			route(offnet);
		}
		if ($rU=~"^\+1571434[0-9]{4,4}$" || $rU=~"^571434[0-9]{4,4}$") {
			xlog("-----> Route to sp1.neustarlab.biz");
			$rd = "sp1.neustarlab.biz;user=phone";
			route(offnet);
		}
	}


	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist()) {
			xlog("lookup location : 420 Bad Extension");
			send_reply("420","Bad Extension");
			exit;
		}
		xlog("lookup location : 404 Not Found");
		t_newtran();
		t_reply("404", "Not Found (lookup location)");
		exit;
	} 

	# when routing via usrloc, log the missed calls also
	setflag(ACC_MISSED);
	route(relay);
}

route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		engage_rtp_proxy();

		# Code to loop in HTTP AS
		xlog("----------------");
		xlog("mb = $mb");
		$var(tmb) = $mb;
		xlog("----------------");

		if (is_from_local()) {
			#Add Date: field
			#append_time();
			#xlog("Method append_time return code : $rc");

			# Add Route header with orig param to include AS, AS is expectected to remove this header
			$var(VIA_hdr) = 'Via: ';
			$var(VIA_idx)=$(var(tmb){s.index,$var(VIA_hdr)});
			$var(ntmb)= $(var(tmb){s.substr,0,$var(VIA_idx)})
					+ "Route: <sip:st-sipappsrvr-wcdcc-001.poc.sys.comcast.net;lr;orig>\r\n"
					+ $(var(tmb){s.substr,$var(VIA_idx),$(var(tmb){s.len})});
			xlog("ntmb = $var(ntmb)");
			xlog("----------------");

			# Originating Leg
			xlog("----------------");
			xlog("Originating Leg");
			xlog("----------------");
			xlog("The request body: $var(ntmb)");
			xlog("----------------");
			if (!rest_post("http://st-sipappsrvr-wcdcc-001.poc.sys.comcast.net/v1/sippacket",
			                "$var(ntmb)", "text/plain; charset=UTF-8", "$var(obody)", "$var(ct)", "$var(rcode)")) {
				xlog("Error code $var(rcode) in HTTP POST!");
				xlog("Error Msg $var(obody)");
				send_reply("403", "Forbidden by AppServ");
				exit;
			}
			xlog("The 200OK body received from the HTTP AS--");
			xlog("HTTP RetCode: $var(rcode) ,, ContentType : $var(ct)");
			xlog("$var(obody)");
			xlog("----------------");
			# END for HTTP AS

			# Now update the INVITE BODY
			# Extract the "Identity: <variable length key>\r\n" from HTTP BODY if present and insert in SIP MSG
			$var(date_hdr) = 'Date: ';
			$var(identity_hdr) = 'Identity: ';
			$var(crlf) = "\r\n";
			$var(date_hdr_index) = $(var(obody){s.index,$var(date_hdr)});
			$var(crlf_index_after_date_hdr) = $(var(obody){s.index,$var(crlf),$var(date_hdr_index)});
			$var(date_hdr_len) = $var(crlf_index_after_date_hdr) - $var(date_hdr_index) + 2;
			$var(id_hdr_index) = $(var(obody){s.index,$var(identity_hdr)});
			$var(crlf_index_after_id_hdr) = $(var(obody){s.index,$var(crlf),$var(id_hdr_index)});
			$var(id_hdr_len) = $var(crlf_index_after_id_hdr) - $var(id_hdr_index) + 2;
			xlog("-----Date Indexes                  : $var(date_hdr_index) - $var(crlf_index_after_date_hdr)");
			xlog("-----Id Indexes                    : $var(id_hdr_index) - $var(crlf_index_after_id_hdr)");
			xlog("-----Date & Identity Header Length : $var(date_hdr_len) & $var(id_hdr_len)");
			if ($var(date_hdr_len) > 2) {
				$var(date_hf) = $(var(obody){s.substr,$var(date_hdr_index),$var(date_hdr_len)});
				xlog("-----Date Header Field             : $var(date_hf)");
				xlog("----------------");

				insert_hf("$var(date_hf)", "Content-Length");
                        } else {
                                xlog("-----Date Header Field             : Not Present");
				xlog("----------------");
                        }
			#if ($var(id_hdr_len) > 2) {
			#	$var(identity_hf) = $(var(obody){s.substr,$var(id_hdr_index),$var(id_hdr_len)});
			#	xlog("-----Identity Header Field         : $var(identity_hf)");
			#	xlog("----------------");

			#	insert_hf("$var(identity_hf)", "Content-Length");
			#} else {
			#	xlog("-----Identity Header Field         : Not Present");
			#	xlog("----------------");
			#}
			$var(tmb) = $var(obody);
                }

		# Add Route header with orig param to include AS, AS is expectected to remove this header
		$var(VIA_hdr) = 'Via: ';
		$var(VIA_idx)=$(var(tmb){s.index,$var(VIA_hdr)});
		$var(ntmb)= $(var(tmb){s.substr,0,$var(VIA_idx)})
				+ "Route: <sip:st-sipappsrvr-wcdcc-001.poc.sys.comcast.net;lr;term>\r\n"
				+ $(var(tmb){s.substr,$var(VIA_idx),$(var(tmb){s.len})});
		xlog("ntmb = $var(ntmb)");
		xlog("----------------");

                # Terminating Leg
		xlog("----------------");
                xlog("Termiantng Leg");
		xlog("----------------");
		xlog("The request body: $var(ntmb)");
		xlog("----------------");
                if (!rest_post("http://st-sipappsrvr-wcdcc-001.poc.sys.comcast.net/v1/sippacket",
                                "$var(ntmb)", "text/plain; charset=UTF-8", "$var(tbody)", "$var(ct)", "$var(rcode)")) {
                        xlog("Error code $var(rcode) in HTTP POST!\n");
                        xlog("Error Msg $var(tbody)\n");
                        send_reply("403", "Forbidden by AppServ");
                        exit;
                }
                xlog("The 200OK body received from the HTTP AS--");
                xlog("HTTP RetCode: $var(rcode) ,, ContentType : $var(ct)");
                xlog("$var(tbody)");
                xlog("----------------");
                # END for HTTP AS

		# Now udpate the message body again with what we got from the AS
                #strip_body();
                #append_hf("Content-Type: application/sdp\r\n");
                #add_body("$var(tbody)", "application/sdp" );
		if (remove_hf("Identity")) {
			xlog("-----> Identity Header is removed!");
		} else {
			xlog("-----> Identity Header is not present!");
		}

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}

# Comcast : Route to External Routes (offnet call)
route[offnet] {

	# Code to loop in HTTP AS
	if (is_from_local()) {

		# Add Route header with orig param to include AS, AS is expectected to remove this header
		xlog("----------------");
		xlog("mb = $mb");
		$var(tmb) = $mb;
		xlog("----------------");
		$var(VIA_hdr) = 'Via: ';
		$var(VIA_idx)=$(var(tmb){s.index,$var(VIA_hdr)});
		$var(ntmb)= $(var(tmb){s.substr,0,$var(VIA_idx)})
				+ "Route: <sip:st-sipappsrvr-wcdcc-001.poc.sys.comcast.net;lr;orig>\r\n"
				+ $(var(tmb){s.substr,$var(VIA_idx),$(var(tmb){s.len})});
		xlog("ntmb = $var(ntmb)");
		xlog("----------------");

		# Originating Leg
		xlog("----------------");
		xlog("Originating Leg");
		xlog("----------------");
		xlog("The request body: $var(ntmb)");
		xlog("----------------");
		if (!rest_post("http://st-sipappsrvr-wcdcc-001.poc.sys.comcast.net/v1/sippacket",
			"$var(ntmb)", "text/plain; charset=UTF-8", "$var(obody)", "$var(ct)", "$var(rcode)")) {
			xlog("Error code $var(rcode) in HTTP POST!");
			xlog("Error Msg $var(obody)");
			send_reply("403", "Forbidden by AppServ");
			exit;
		}
		xlog("The 200OK body received from the HTTP AS--");
		xlog("HTTP RetCode: $var(rcode) ,, ContentType : $var(ct)");
		xlog("$var(obody)");
		xlog("----------------");
		# END for HTTP AS

		# Now update the INVITE BODY
		# Extract the "Identity: <variable length key>\r\n" from HTTP BODY if present and insert in SIP MSG
		$var(date_hdr) = 'Date: ';
		$var(identity_hdr) = 'Identity: ';
		$var(crlf) = "\r\n";
		$var(date_hdr_index) = $(var(obody){s.index,$var(date_hdr)});
		$var(crlf_index_after_date_hdr) = $(var(obody){s.index,$var(crlf),$var(date_hdr_index)});
		$var(date_hdr_len) = $var(crlf_index_after_date_hdr) - $var(date_hdr_index) + 2;
		$var(id_hdr_index) = $(var(obody){s.index,$var(identity_hdr)});
		$var(crlf_index_after_id_hdr) = $(var(obody){s.index,$var(crlf),$var(id_hdr_index)});
		$var(id_hdr_len) = $var(crlf_index_after_id_hdr) - $var(id_hdr_index) + 2;
		xlog("-----Date Indexes                  : $var(date_hdr_index) - $var(crlf_index_after_date_hdr)");
		xlog("-----Id Indexes                    : $var(id_hdr_index) - $var(crlf_index_after_id_hdr)");
		xlog("-----Date & Identity Header Length : $var(date_hdr_len) & $var(id_hdr_len)");
		if ($var(date_hdr_len) > 2) {
			$var(date_hf) = $(var(obody){s.substr,$var(date_hdr_index),$var(date_hdr_len)});
			xlog("-----Date Header Field             : $var(date_hf)");

			insert_hf("$var(date_hf)", "Content-Length");
		} else {
			xlog("-----Date Header Field             : Not Present");
		}
		if ($var(id_hdr_len) > 2) {
			$var(identity_hf) = $(var(obody){s.substr,$var(id_hdr_index),$var(id_hdr_len)});
			xlog("-----Identity Header Field         : $var(identity_hf)");
			xlog("----------------");

			insert_hf("$var(identity_hf)", "Content-Length");
		} else {
			xlog("-----Identity Header Field         : Not Present");
			xlog("----------------");
		}
	}

	# Let's route the offnet call to known destinations
	if (is_method("INVITE")) {
		engage_rtp_proxy();
	}
	switch($rd) {
		# siptest.comcast.net 96.119.7.172
		case "siptest.comcast.net":
			if (!t_relay("96.119.7.172")) {
				xlog("Unable to Route OFFNET siptest.comcast.net(96.119.7.172)");
				# May want to do different stuff for different methods e.g. is_method("INVITE")
				send_reply("500", "Internal Error : Unable to Route");
			}
			break;

		# site2.siptest.comcast.net 96.118.164.67
		case "site2.siptest.comcast.net":
			if (!t_relay("96.118.164.67")) {
				xlog("Unable to Route OFFNET site2.siptest.comcast.net(96.118.164.67)");
				# May want to do different stuff for different methods e.g. is_method("INVITE")
				send_reply("500", "Internal Error : Unable to Route");
			}
			break;

		# sp1.neustarlab.biz to lab2sbc1 156.154.19.104
		case "sp1.neustarlab.biz":
			#if (is_method("INVITE")) {
			#	engage_rtp_proxy();
			#}
			if (!t_relay("156.154.19.104")) {
				xlog("Unable to Route OFFNET sp1.neustarlab.biz(156.154.19.104)");
				# May want to do different stuff for different methods e.g. is_method("INVITE")
				send_reply("500", "Internal Error : Unable to Route");
			}
			break;

		default:
			# If no route for OffNet or user not found OnNet
			xlog("Domain location : $rd");
			xlog("                 : 404 Not Found or Destination UnReachable");
			t_newtran();
			t_reply("404", "Not Found");
	}
	exit;
}

# Presence route
route[handle_presence]
{
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}
	
	if(is_method("PUBLISH")) {
		handle_publish();
	} else if( is_method("SUBSCRIBE")) {
		handle_subscribe();
	}	
	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	
	#xlog("incoming reply\n");
	xlog("incoming reply.. $rs $rr, From: $fu To: $tu Call-Id: $ci");
	xlog("---------------- $mb");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		xlog("t_was_cancelled - Call cancelled by UAC");
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

}



local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		acc_db_request("200 Dialog Timeout", "acc");
	}
}
